// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data_server.proto

package data

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetReply struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_799d50bf0c578f00, []int{0}
}

func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799d50bf0c578f00, []int{1}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PutReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutReply) Reset()         { *m = PutReply{} }
func (m *PutReply) String() string { return proto.CompactTextString(m) }
func (*PutReply) ProtoMessage()    {}
func (*PutReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_799d50bf0c578f00, []int{2}
}

func (m *PutReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutReply.Unmarshal(m, b)
}
func (m *PutReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutReply.Marshal(b, m, deterministic)
}
func (m *PutReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutReply.Merge(m, src)
}
func (m *PutReply) XXX_Size() int {
	return xxx_messageInfo_PutReply.Size(m)
}
func (m *PutReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PutReply.DiscardUnknown(m)
}

var xxx_messageInfo_PutReply proto.InternalMessageInfo

func (m *PutReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PutRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799d50bf0c578f00, []int{3}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

func (m *PutRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PutRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GetReply)(nil), "data.GetReply")
	proto.RegisterType((*GetRequest)(nil), "data.GetRequest")
	proto.RegisterType((*PutReply)(nil), "data.PutReply")
	proto.RegisterType((*PutRequest)(nil), "data.PutRequest")
}

func init() { proto.RegisterFile("data_server.proto", fileDescriptor_799d50bf0c578f00) }

var fileDescriptor_799d50bf0c578f00 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x49, 0x2c, 0x49,
	0x8c, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01,
	0x09, 0x29, 0xc9, 0x71, 0x71, 0xb8, 0xa7, 0x96, 0x04, 0xa5, 0x16, 0xe4, 0x54, 0x0a, 0x09, 0x71,
	0x81, 0xc5, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x20, 0xf2, 0x0a, 0x5c, 0x5c, 0x60, 0xf9,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x90, 0x8a, 0xbc, 0xc4, 0xdc, 0x54, 0xb0, 0x0a, 0xce, 0x20, 0x30,
	0x1b, 0x64, 0x42, 0x40, 0x29, 0xc2, 0x04, 0x0c, 0x79, 0x13, 0x2e, 0x2e, 0xb0, 0x3c, 0x4e, 0x13,
	0xe0, 0xf6, 0x32, 0x21, 0xec, 0x35, 0x8a, 0xe3, 0x62, 0x71, 0x49, 0x2c, 0x49, 0x14, 0xd2, 0xe4,
	0x62, 0x76, 0x4f, 0x2d, 0x11, 0x12, 0xd0, 0x03, 0x89, 0xea, 0x21, 0x9c, 0x22, 0xc5, 0x87, 0x24,
	0x52, 0x90, 0x53, 0xa9, 0xc4, 0x20, 0xa4, 0xcd, 0xc5, 0x1c, 0x50, 0x0a, 0x57, 0x8a, 0xb0, 0x13,
	0xa6, 0x14, 0xe6, 0x4a, 0x25, 0x06, 0x0d, 0xc6, 0x24, 0x36, 0x70, 0x20, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x42, 0xfa, 0x01, 0x3e, 0x19, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Put(ctx context.Context, opts ...grpc.CallOption) (Data_PutClient, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/data.Data/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Put(ctx context.Context, opts ...grpc.CallOption) (Data_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[0], "/data.Data/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataPutClient{stream}
	return x, nil
}

type Data_PutClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*PutReply, error)
	grpc.ClientStream
}

type dataPutClient struct {
	grpc.ClientStream
}

func (x *dataPutClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataPutClient) CloseAndRecv() (*PutReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	Get(context.Context, *GetRequest) (*GetReply, error)
	Put(Data_PutServer) error
}

// UnimplementedDataServer can be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (*UnimplementedDataServer) Get(ctx context.Context, req *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDataServer) Put(srv Data_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).Put(&dataPutServer{stream})
}

type Data_PutServer interface {
	SendAndClose(*PutReply) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type dataPutServer struct {
	grpc.ServerStream
}

func (x *dataPutServer) SendAndClose(m *PutReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataPutServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Data_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _Data_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "data_server.proto",
}
